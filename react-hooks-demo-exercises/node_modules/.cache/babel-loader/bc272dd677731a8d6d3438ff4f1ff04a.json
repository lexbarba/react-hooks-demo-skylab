{"ast":null,"code":"/**\n * \n * User API\n * \n * @version 0.0.1\n */\nvar userApi = {\n  url: \"https://skylabcoders.herokuapp.com/api\",\n\n  /**\n   * \n   * Register a new user\n   * \n   * @param {string} name \n   * @param {string} surname \n   * @param {string} username \n   * @param {string} password \n   * \n   * @throws {TypeError} - When any param is not a string.\n   * @throws {Error} - When any param is empty.\n   * @throws {Error} - When API returns an error.\n   * \n   * @returns {Object} - User Id.\n   * \n   */\n  register: function register(name, surname, username, password) {\n    if (typeof name !== 'string') throw TypeError(\"\".concat(name, \" is not a string\"));\n    if (!name.trim().length) throw Error('name is empty');\n    if (typeof surname !== 'string') throw TypeError(\"\".concat(surname, \" is not a string\"));\n    if (!surname.trim().length) throw Error('surname is empty');\n    if (typeof username !== 'string') throw TypeError(\"\".concat(username, \" is not a string\"));\n    if (!username.trim().length) throw Error('username is empty');\n    if (typeof password !== 'string') throw TypeError(\"\".concat(password, \" is not a string\"));\n    if (!password.trim().length) throw Error('password is empty');\n    return fetch(\"\".concat(this.url, \"/user\"), {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: name,\n        surname: surname,\n        username: username,\n        password: password,\n        favourites: []\n      })\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      var status = response.status;\n      if (status === 'OK') return response.data.id;\n      throw Error(response.error);\n    });\n  },\n\n  /**\n   * \n   * Authenticates a user.\n   * \n   * @param {string} username \n   * @param {string} password \n   * \n   * @throws {TypeError} - When any param is not a string.\n   * @throws {Error} - When any param is empty.\n   * @throws {Error} - When API returns an error.\n   * \n   * @returns {Object} - User id and token.\n   * \n   */\n  authenticate: function authenticate(username, password) {\n    if (typeof username !== 'string') throw TypeError(\"\".concat(username, \" is not a string\"));\n    if (!username.trim().length) throw Error('username is empty');\n    if (typeof password !== 'string') throw TypeError(\"\".concat(password, \" is not a string\"));\n    if (!password.trim().length) throw Error('password is empty');\n    return fetch(\"\".concat(this.url, \"/auth\"), {\n      method: 'POST',\n      headers: {\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        username: username,\n        password: password\n      })\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      var status = response.status;\n      if (status === 'OK') return response;\n      throw Error(response.error);\n    });\n  },\n\n  /**\n   * \n   * Retrieves user data.\n   * \n   * @param {string} id \n   * @param {string} token \n   * \n   * @throws {TypeError} - When any param is not a string.\n   * @throws {Error} - When any param is empty.\n   * @throws {Error} - When API returns an error.\n   * \n   * @returns {Object} - User data.\n   * \n   */\n  retrieve: function retrieve(id, token) {\n    if (typeof id !== 'string') throw TypeError(\"\".concat(id, \" is not a string\"));\n    if (!id.trim().length) throw Error('id is empty');\n    if (typeof token !== 'string') throw TypeError(\"\".concat(token, \" is not a string\"));\n    if (!token.trim().length) throw Error('token is empty');\n    return fetch(\"\".concat(this.url, \"/user/\").concat(id), {\n      headers: {\n        authorization: \"Bearer \".concat(token)\n      }\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      var status = response.status;\n      if (status === 'OK') return response.data;\n      throw Error(response.error);\n    });\n  },\n\n  /**\n   * \n   * Updates user data.\n   * \n   * @param {string} id \n   * @param {string} token \n   * @param {Object} data \n   * \n   * @throws {TypeError} - When any param is not a string.\n   * @throws {Error} - When any param is empty.\n   * @throws {Error} - When API returns an error.\n   * \n   * @returns {String} - Returns an OK or KO status.\n   * \n   */\n  update: function update(id, token, data) {\n    if (typeof id !== 'string') throw TypeError(\"\".concat(id, \" is not a string\"));\n    if (!id.trim().length) throw Error('id is empty');\n    if (typeof token !== 'string') throw TypeError(\"\".concat(token, \" is not a string\"));\n    if (!token.trim().length) throw Error('token is empty');\n    if (!data) throw Error('data is empty');\n    if (data.constructor !== Object) throw TypeError(\"\".concat(data, \" is not an object\"));\n    return fetch(\"\".concat(this.url, \"/user/\").concat(id), {\n      method: 'PUT',\n      headers: {\n        authorization: \"Bearer \".concat(token),\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify(data)\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      var status = response.status;\n      if (status === 'OK') return response;\n      throw Error(response.error);\n    });\n  },\n\n  /**\n   * \n   * Removes a user.\n   * \n   * @param {string} id \n   * @param {string} token \n   * @param {string} username \n   * @param {string} password \n   * \n   * @throws {TypeError} - When any param is not a string.\n   * @throws {Error} - When any param is empty.\n   * @throws {Error} - When API returns an error.\n   * \n   * @returns {String} - Returns an OK or KO status.\n   * \n   */\n  remove: function remove(id, token, username, password) {\n    if (typeof id !== 'string') throw TypeError(\"\".concat(id, \" is not a string\"));\n    if (!id.trim().length) throw Error('id is empty');\n    if (typeof token !== 'string') throw TypeError(\"\".concat(token, \" is not a string\"));\n    if (!token.trim().length) throw Error('token is empty');\n    if (typeof username !== 'string') throw TypeError(\"\".concat(username, \" is not a string\"));\n    if (!username.trim().length) throw Error('username is empty');\n    if (typeof password !== 'string') throw TypeError(\"\".concat(password, \" is not a string\"));\n    if (!password.trim().length) throw Error('password is empty');\n    return fetch(\"\".concat(this.url, \"/user/\").concat(id), {\n      method: 'DELETE',\n      headers: {\n        authorization: \"Bearer \".concat(token),\n        'content-type': 'application/json'\n      },\n      body: JSON.stringify({\n        username: username,\n        password: password\n      })\n    }).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      var status = response.status;\n      if (status === 'OK') return;\n      throw Error(response.error);\n    });\n  }\n};\nexport default userApi;","map":{"version":3,"sources":["/Users/alexbarba/bootcamp/react-hooks-demo/marvel-app/src/user-api/index.js"],"names":["userApi","url","register","name","surname","username","password","TypeError","trim","length","Error","fetch","method","headers","body","JSON","stringify","favourites","then","response","json","status","data","id","error","authenticate","retrieve","token","authorization","update","constructor","Object","remove"],"mappings":"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","sourcesContent":["/**\n * \n * User API\n * \n * @version 0.0.1\n */\n\nconst userApi = {\n\n    url: `https://skylabcoders.herokuapp.com/api`,\n\n    /**\n     * \n     * Register a new user\n     * \n     * @param {string} name \n     * @param {string} surname \n     * @param {string} username \n     * @param {string} password \n     * \n     * @throws {TypeError} - When any param is not a string.\n     * @throws {Error} - When any param is empty.\n     * @throws {Error} - When API returns an error.\n     * \n     * @returns {Object} - User Id.\n     * \n     */\n\n    register(name, surname, username, password) {\n        if (typeof name !== 'string') throw TypeError(`${name} is not a string`)\n        if (!name.trim().length) throw Error('name is empty')\n\n        if (typeof surname !== 'string') throw TypeError(`${surname} is not a string`)\n        if (!surname.trim().length) throw Error('surname is empty')\n\n        if (typeof username !== 'string') throw TypeError(`${username} is not a string`)\n        if (!username.trim().length) throw Error('username is empty')\n\n        if (typeof password !== 'string') throw TypeError(`${password} is not a string`)\n        if (!password.trim().length) throw Error('password is empty')\n\n\n        return fetch(`${this.url}/user`, {\n            method: 'POST',\n            headers: {\n                'content-type': 'application/json'\n            },\n            body: JSON.stringify({ name, surname, username, password, favourites: [] })\n        })\n            .then(response => response.json())\n            .then(response => {\n                const { status } = response\n\n                if (status === 'OK') return response.data.id\n                throw Error(response.error)\n            })\n    },\n\n    /**\n     * \n     * Authenticates a user.\n     * \n     * @param {string} username \n     * @param {string} password \n     * \n     * @throws {TypeError} - When any param is not a string.\n     * @throws {Error} - When any param is empty.\n     * @throws {Error} - When API returns an error.\n     * \n     * @returns {Object} - User id and token.\n     * \n     */\n\n    authenticate(username, password) {\n        if (typeof username !== 'string') throw TypeError(`${username} is not a string`)\n        if (!username.trim().length) throw Error('username is empty')\n\n        if (typeof password !== 'string') throw TypeError(`${password} is not a string`)\n        if (!password.trim().length) throw Error('password is empty')\n\n        return fetch(`${this.url}/auth`, {\n            method: 'POST',\n            headers: {\n                'content-type': 'application/json'\n            },\n            body: JSON.stringify({ username, password })\n        })\n            .then(response => response.json())\n            .then(response => {\n                const { status } = response\n\n                if (status === 'OK') return response\n                throw Error(response.error)\n            })\n    },\n\n    /**\n     * \n     * Retrieves user data.\n     * \n     * @param {string} id \n     * @param {string} token \n     * \n     * @throws {TypeError} - When any param is not a string.\n     * @throws {Error} - When any param is empty.\n     * @throws {Error} - When API returns an error.\n     * \n     * @returns {Object} - User data.\n     * \n     */\n\n    retrieve(id, token) {\n        if (typeof id !== 'string') throw TypeError(`${id} is not a string`)\n        if (!id.trim().length) throw Error('id is empty')\n\n        if (typeof token !== 'string') throw TypeError(`${token} is not a string`)\n        if (!token.trim().length) throw Error('token is empty')\n\n        return fetch(`${this.url}/user/${id}`, {\n            headers: {\n                authorization: `Bearer ${token}`\n            }\n        })\n            .then(response => response.json())\n            .then(response => {\n                const { status } = response\n\n                if (status === 'OK') return response.data\n                throw Error(response.error)\n            })\n    },\n\n    /**\n     * \n     * Updates user data.\n     * \n     * @param {string} id \n     * @param {string} token \n     * @param {Object} data \n     * \n     * @throws {TypeError} - When any param is not a string.\n     * @throws {Error} - When any param is empty.\n     * @throws {Error} - When API returns an error.\n     * \n     * @returns {String} - Returns an OK or KO status.\n     * \n     */\n\n    update(id, token, data) {\n        if (typeof id !== 'string') throw TypeError(`${id} is not a string`)\n        if (!id.trim().length) throw Error('id is empty')\n\n        if (typeof token !== 'string') throw TypeError(`${token} is not a string`)\n        if (!token.trim().length) throw Error('token is empty')\n\n        if (!data) throw Error('data is empty')\n        if (data.constructor !== Object) throw TypeError(`${data} is not an object`)\n\n        return fetch(`${this.url}/user/${id}`, {\n            method: 'PUT',\n            headers: {\n                authorization: `Bearer ${token}`,\n                'content-type': 'application/json'\n            },\n            body: JSON.stringify(data)\n        })\n            .then(response => response.json())\n            .then(response => {\n                const { status } = response\n\n                if (status === 'OK') return response \n                throw Error(response.error)\n            })\n    },\n\n    /**\n     * \n     * Removes a user.\n     * \n     * @param {string} id \n     * @param {string} token \n     * @param {string} username \n     * @param {string} password \n     * \n     * @throws {TypeError} - When any param is not a string.\n     * @throws {Error} - When any param is empty.\n     * @throws {Error} - When API returns an error.\n     * \n     * @returns {String} - Returns an OK or KO status.\n     * \n     */\n\n    remove(id, token, username, password) {\n        if (typeof id !== 'string') throw TypeError(`${id} is not a string`)\n        if (!id.trim().length) throw Error('id is empty')\n\n        if (typeof token !== 'string') throw TypeError(`${token} is not a string`)\n        if (!token.trim().length) throw Error('token is empty')\n\n        if (typeof username !== 'string') throw TypeError(`${username} is not a string`)\n        if (!username.trim().length) throw Error('username is empty')\n\n        if (typeof password !== 'string') throw TypeError(`${password} is not a string`)\n        if (!password.trim().length) throw Error('password is empty')\n\n        return fetch(`${this.url}/user/${id}`, {\n            method: 'DELETE',\n            headers: {\n                authorization: `Bearer ${token}`,\n                'content-type': 'application/json'\n            },\n            body: JSON.stringify({ username, password })\n        })\n            .then(response => response.json())\n            .then(response => {\n                const { status } = response\n\n                if (status === 'OK') return\n\n                throw Error(response.error)\n            })\n    }\n}\n\nexport default userApi\n"]},"metadata":{},"sourceType":"module"}