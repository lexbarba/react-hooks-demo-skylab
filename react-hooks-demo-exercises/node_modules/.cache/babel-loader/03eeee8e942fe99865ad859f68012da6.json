{"ast":null,"code":"/**\n * \n * Business logic for Marvel App\n * \n */\nimport marvelApi from \"../../marvel-api\";\nimport userApi from \"../../user-api\";\nvar logic = {\n  setUserId: function setUserId(id) {\n    this.___userId___ = id;\n  },\n  getUserId: function getUserId() {\n    return this.___userId___;\n  },\n  setUserApiToken: function setUserApiToken(token) {\n    this.___userApiToken___ = token;\n  },\n  getUserApiToken: function getUserApiToken() {\n    return this.___userApiToken___;\n  },\n\n  set __userId__(id) {\n    this.setUserId(id);\n  },\n\n  get __userId__() {\n    return this.getUserId();\n  },\n\n  set __userApiToken__(token) {\n    this.setUserApiToken(token);\n  },\n\n  get __userApiToken__() {\n    return this.getUserApiToken();\n  },\n\n  /**\n  * Registers a user.\n  *\n  * @param {string} name\n  * @param {string} surname\n  * @param {string} email\n  * @param {string} password\n  * @param {string} passwordConfirm\n  *\n  * @throws {TypeError} - If any param is not a string.\n  * @throws {Error} - If any param is empty.\n  * @throws {Error} - If password and password confirmation do not match.\n  *\n  * @returns {String} - User Id.\n  */\n  register: function register(name, surname, email, password, passwordConfirm) {\n    if (typeof name !== \"string\") throw TypeError(name + \" is not a string\");\n    if (!name.trim().length) throw Error(\"name is empty\");\n    if (typeof surname !== \"string\") throw TypeError(surname + \" is not a string\");\n    if (!surname.trim().length) throw Error(\"surname is empty\");\n    if (typeof email !== \"string\") throw TypeError(email + \" is not a string\");\n    if (!email.trim().length) throw Error(\"email is empty\");\n    if (typeof password !== \"string\") throw TypeError(password + \" is not a string\");\n    if (!password.trim().length) throw Error(\"password is empty\");\n    if (typeof passwordConfirm !== \"string\") throw TypeError(passwordConfirm + \" is not a string\");\n    if (!passwordConfirm.trim().length) throw Error(\"password confirmation is empty\");\n    if (password !== passwordConfirm) throw Error(\"passwords do not match\");\n    return userApi.register(name, surname, email, password).then(function () {});\n  },\n\n  /**\n   * Login by credentials.\n   *\n   * @param {string} email\n   * @param {string} password\n   *\n   * @throws {TypeError} - If any param is not a string.\n   * @throws {Error} - If any param is empty.\n   *\n   * @returns {Object} - Contains user Id and Token.\n   */\n  login: function login(email, password) {\n    var _this = this;\n\n    if (typeof email !== \"string\") throw TypeError(email + \" is not a string\");\n    if (!email.trim().length) throw Error(\"email is empty\");\n    if (typeof password !== \"string\") throw TypeError(password + \" is not a string\");\n    if (!password.trim().length) throw Error(\"password is empty\");\n    return userApi.authenticate(email, password).then(function (response) {\n      var _response$data = response.data,\n          id = _response$data.id,\n          token = _response$data.token,\n          status = response.status;\n\n      if (status === \"OK\") {\n        _this.__userId__ = id;\n        _this.__userApiToken__ = token;\n        return response.data;\n      }\n\n      throw Error(response.error);\n    });\n  },\n\n  get userLoggedIn() {\n    return !!this.__userId__;\n  },\n\n  logout: function logout() {\n    this.__userId__ = null;\n    this.__userApiToken__ = null;\n  },\n\n  /**\n   * Retrieve user data.\n   *\n   * @param {string} id\n   * @param {string} token\n   *\n   * @throws {TypeError} - If any param is not a string.\n   * @throws {Error} - If any param is empty.\n   *\n   * @returns {Object} - With all user info.\n   */\n  retrieveUser: function retrieveUser() {\n    return userApi.retrieve(this.__userId__, this.__userApiToken__).then(function (response) {\n      var name = response.name;\n      if (name) return response;\n      throw Error(response.error);\n    });\n  },\n\n  /**\n   *\n   * Search characters\n   *\n   * @param {string} query\n   *\n   * @returns {Promise}\n   */\n  searchCharacter: function searchCharacter(query) {\n    debugger;\n    if (typeof query !== \"string\") throw TypeError(\"\".concat(query, \" is not a string\"));\n    if (!query.trim().length) throw Error(\"query is empty\");\n    return marvelApi.searchCharacter(query);\n  },\n\n  /**\n   *\n   * Retrieve character\n   *\n   * @param {string} characterId\n   *\n   * @returns {Promise}\n   */\n  retrieveCharacter: function retrieveCharacter(characterId) {\n    if (typeof characterId !== \"string\") throw TypeError(\"\".concat(characterId, \" is not a string\"));\n    if (!characterId.trim().length) throw Error(\"characterId is empty\");\n    return marvelApi.retrieveCharacter(characterId);\n  },\n\n  /**\n   *\n   * Retrieve comic\n   *\n   * @param {string} comicId\n   *\n   * @returns {Promise}\n   */\n  retrieveComic: function retrieveComic(comicId) {\n    if (typeof comicId !== \"string\") throw TypeError(\"\".concat(comicId, \" is not a string\"));\n    if (!comicId.trim().length) throw Error(\"comicId is empty\");\n    return marvelApi.retrieveComic(comicId);\n  },\n\n  /**\n   * Updates user favourites.\n   *\n   * @param {Object} - New data to be added\n   *\n   * @throws {TypeError} - If the param is not an Object.\n   *\n   * @returns {Array} - Array with favourites data.\n   */\n  updateFavourites: function updateFavourites(fav) {\n    var _this2 = this;\n\n    if (fav.constructor !== Object) throw TypeError(\"\".concat(fav, \" is not an object\"));\n    var favourites;\n    var exists;\n    var temp = fav;\n    return this.retrieveUser(this.__userId__, this.__userApiToken__).then(function (data) {\n      favourites = data.favourites;\n    }).then(function () {\n      exists = favourites.findIndex(function (obj) {\n        return obj.id === temp.id;\n      });\n\n      if (exists !== -1) {\n        favourites.splice(exists, 1);\n        return _this2.updateUser({\n          favourites: favourites\n        });\n      } else {\n        favourites.push(temp);\n        return _this2.updateUser({\n          favourites: favourites\n        });\n      }\n    }).then(function () {\n      return _this2.retrieveFavourites();\n    });\n  },\n\n  /**\n   * \n   * Retrieves favourites data.\n   * \n   * @returns {Array} - Array with favourites data.\n   */\n  retrieveFavourites: function retrieveFavourites() {\n    return this.retrieveUser(this.__userId__, this.__userApiToken__).then(function (user) {\n      return user.favourites;\n    });\n  },\n\n  /**\n   * \n   * Updates user favourites.\n   *\n   * @param {Object} - New data to be added\n   *\n   * @throws {TypeError} - If the param is not an Object.\n   *\n   * @returns {Object} - If the update was successfull or not.\n   */\n  updateUser: function updateUser(data) {\n    if (data.constructor !== Object) throw TypeError(\"\".concat(data, \" is not an object\"));\n    return userApi.update(this.__userId__, this.__userApiToken__, data).then(function (response) {\n      var status = response.status;\n      if (status === \"OK\") return response;\n      throw Error(response.error);\n    });\n  }\n};\nexport default logic;","map":{"version":3,"sources":["/Users/alexbarba/bootcamp/react-hooks-demo/marvel-app/src/components/Logic/index.js"],"names":["marvelApi","userApi","logic","setUserId","id","___userId___","getUserId","setUserApiToken","token","___userApiToken___","getUserApiToken","__userId__","__userApiToken__","register","name","surname","email","password","passwordConfirm","TypeError","trim","length","Error","then","login","authenticate","response","data","status","error","userLoggedIn","logout","retrieveUser","retrieve","searchCharacter","query","retrieveCharacter","characterId","retrieveComic","comicId","updateFavourites","fav","constructor","Object","favourites","exists","temp","findIndex","obj","splice","updateUser","push","retrieveFavourites","user","update"],"mappings":"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","sourcesContent":["\n\n/**\n * \n * Business logic for Marvel App\n * \n */\n\nimport marvelApi from \"../../marvel-api\";\nimport userApi from \"../../user-api\";\n\nconst logic = {\n\n    setUserId(id) {\n        this.___userId___ = id\n    },\n\n    getUserId() {\n        return this.___userId___\n    },\n\n    setUserApiToken(token) {\n        this.___userApiToken___ = token\n    },\n\n    getUserApiToken() {\n        return this.___userApiToken___\n    },\n\n    set __userId__(id) {\n        this.setUserId(id)\n    },\n\n    get __userId__() {\n        return this.getUserId()\n    },\n\n    set __userApiToken__(token) {\n        this.setUserApiToken(token)\n    },\n\n    get __userApiToken__() {\n        return this.getUserApiToken()\n    },\n\n\n    /**\n   * Registers a user.\n   *\n   * @param {string} name\n   * @param {string} surname\n   * @param {string} email\n   * @param {string} password\n   * @param {string} passwordConfirm\n   *\n   * @throws {TypeError} - If any param is not a string.\n   * @throws {Error} - If any param is empty.\n   * @throws {Error} - If password and password confirmation do not match.\n   *\n   * @returns {String} - User Id.\n   */\n\n    register(name, surname, email, password, passwordConfirm) {\n        if (typeof name !== \"string\") throw TypeError(name + \" is not a string\");\n\n        if (!name.trim().length) throw Error(\"name is empty\");\n\n        if (typeof surname !== \"string\")\n            throw TypeError(surname + \" is not a string\");\n\n        if (!surname.trim().length) throw Error(\"surname is empty\");\n\n        if (typeof email !== \"string\") throw TypeError(email + \" is not a string\");\n\n        if (!email.trim().length) throw Error(\"email is empty\");\n\n        if (typeof password !== \"string\")\n            throw TypeError(password + \" is not a string\");\n\n        if (!password.trim().length) throw Error(\"password is empty\");\n\n        if (typeof passwordConfirm !== \"string\")\n            throw TypeError(passwordConfirm + \" is not a string\");\n\n        if (!passwordConfirm.trim().length)\n            throw Error(\"password confirmation is empty\");\n\n        if (password !== passwordConfirm) throw Error(\"passwords do not match\");\n\n        return userApi.register(name, surname, email, password).then(() => { });\n    },\n\n    /**\n     * Login by credentials.\n     *\n     * @param {string} email\n     * @param {string} password\n     *\n     * @throws {TypeError} - If any param is not a string.\n     * @throws {Error} - If any param is empty.\n     *\n     * @returns {Object} - Contains user Id and Token.\n     */\n    login(email, password) {\n        if (typeof email !== \"string\") throw TypeError(email + \" is not a string\");\n\n        if (!email.trim().length) throw Error(\"email is empty\");\n\n        if (typeof password !== \"string\")\n            throw TypeError(password + \" is not a string\");\n\n        if (!password.trim().length) throw Error(\"password is empty\");\n\n        return userApi.authenticate(email, password).then(response => {\n            const { data: { id, token }, status} = response\n\n            if (status === \"OK\") {\n                this.__userId__ = id\n                this.__userApiToken__ = token\n                return response.data\n            }\n            throw Error(response.error)\n        });\n    },\n\n    get userLoggedIn() {\n        return !!this.__userId__\n    },\n\n    logout() {\n        this.__userId__ = null\n        this.__userApiToken__ = null\n    },\n\n    /**\n     * Retrieve user data.\n     *\n     * @param {string} id\n     * @param {string} token\n     *\n     * @throws {TypeError} - If any param is not a string.\n     * @throws {Error} - If any param is empty.\n     *\n     * @returns {Object} - With all user info.\n     */\n\n    retrieveUser() {\n\n        return userApi.retrieve(this.__userId__, this.__userApiToken__).then(response => {\n            const { name } = response\n\n            if (name) return response\n            throw Error(response.error);\n        });\n    },\n\n    /**\n     *\n     * Search characters\n     *\n     * @param {string} query\n     *\n     * @returns {Promise}\n     */\n\n    searchCharacter(query) {\n        debugger\n        if (typeof query !== \"string\") throw TypeError(`${query} is not a string`);\n        if (!query.trim().length) throw Error(\"query is empty\");\n\n        return marvelApi.searchCharacter(query);\n    },\n\n    /**\n     *\n     * Retrieve character\n     *\n     * @param {string} characterId\n     *\n     * @returns {Promise}\n     */\n\n    retrieveCharacter(characterId) {\n        if (typeof characterId !== \"string\")\n            throw TypeError(`${characterId} is not a string`);\n        if (!characterId.trim().length) throw Error(`characterId is empty`);\n\n        return marvelApi.retrieveCharacter(characterId);\n    },\n\n    /**\n     *\n     * Retrieve comic\n     *\n     * @param {string} comicId\n     *\n     * @returns {Promise}\n     */\n\n    retrieveComic(comicId) {\n        if (typeof comicId !== \"string\")\n            throw TypeError(`${comicId} is not a string`);\n        if (!comicId.trim().length) throw Error(`comicId is empty`);\n\n        return marvelApi.retrieveComic(comicId);\n    },\n\n    /**\n     * Updates user favourites.\n     *\n     * @param {Object} - New data to be added\n     *\n     * @throws {TypeError} - If the param is not an Object.\n     *\n     * @returns {Array} - Array with favourites data.\n     */\n\n    updateFavourites(fav) {\n        if (fav.constructor !== Object) throw TypeError(`${fav} is not an object`);\n\n        let favourites;\n        let exists;\n        let temp = fav;\n        return this.retrieveUser(this.__userId__, this.__userApiToken__)\n            .then(data => {\n                favourites = data.favourites;\n            })\n            .then(() => {\n                exists = favourites.findIndex(obj => obj.id === temp.id);\n\n                if (exists !== -1) {\n                    favourites.splice(exists, 1);\n                    return this.updateUser({ favourites: favourites });\n                } else {\n                    favourites.push(temp);\n                    return this.updateUser({ favourites: favourites });\n                }\n            })\n            .then(() => this.retrieveFavourites());\n    },\n\n    /**\n     * \n     * Retrieves favourites data.\n     * \n     * @returns {Array} - Array with favourites data.\n     */\n\n    retrieveFavourites() {\n        return this.retrieveUser(this.__userId__, this.__userApiToken__)\n            .then(user => {\n                return user.favourites;\n            }\n        );\n    },\n\n    /**\n     * \n     * Updates user favourites.\n     *\n     * @param {Object} - New data to be added\n     *\n     * @throws {TypeError} - If the param is not an Object.\n     *\n     * @returns {Object} - If the update was successfull or not.\n     */\n\n    updateUser(data) {\n        if (data.constructor !== Object)throw TypeError(`${data} is not an object`)\n\n        return userApi.update(this.__userId__, this.__userApiToken__, data)\n            .then(response => {\n                const { status } = response\n\n                if (status === \"OK\") return response\n                throw Error(response.error)\n            });\n    }\n};\n\nexport default logic\n"]},"metadata":{},"sourceType":"module"}