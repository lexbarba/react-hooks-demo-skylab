{"ast":null,"code":"/**\n * \n * Business logic for Marvel App\n * \n */\nimport marvelApi from \"../marvel-api\";\nvar logic = {\n  /**\n   *\n   * Search characters\n   *\n   * @param {string} query\n   *\n   * @returns {Promise}\n   */\n  searchCharacter: function searchCharacter(query) {\n    if (typeof query !== \"string\") throw TypeError(\"\".concat(query, \" is not a string\"));\n    if (!query.trim().length) throw Error(\"query is empty\");\n    return marvelApi.searchCharacter(query);\n  },\n\n  /**\n   *\n   * Retrieve character\n   *\n   * @param {number} characterId\n   *\n   * @returns {Promise}\n   */\n  retrieveCharacter: function retrieveCharacter(characterId) {\n    if (typeof characterId !== \"number\") throw TypeError(\"\".concat(characterId, \" is not a number\"));\n    if (!characterId) throw Error(\"characterId is empty\");\n    return marvelApi.retrieveCharacter(characterId);\n  }\n};\nexport default logic;","map":{"version":3,"sources":["/Users/alexbarba/bootcamp/react-hooks-demo/react-hooks-demo-exercises/src/logic/index.js"],"names":["marvelApi","logic","searchCharacter","query","TypeError","trim","length","Error","retrieveCharacter","characterId"],"mappings":"AAAA;;;;;AAMA,OAAOA,SAAP,MAAsB,eAAtB;AAEA,IAAMC,KAAK,GAAG;AAEV;;;;;;;;AASAC,EAAAA,eAXU,2BAWMC,KAXN,EAWa;AACnB,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B,MAAMC,SAAS,WAAID,KAAJ,sBAAf;AAC/B,QAAI,CAACA,KAAK,CAACE,IAAN,GAAaC,MAAlB,EAA0B,MAAMC,KAAK,CAAC,gBAAD,CAAX;AAE1B,WAAOP,SAAS,CAACE,eAAV,CAA0BC,KAA1B,CAAP;AACH,GAhBS;;AAkBV;;;;;;;;AASAK,EAAAA,iBA3BU,6BA2BQC,WA3BR,EA2BqB;AAC3B,QAAI,OAAOA,WAAP,KAAuB,QAA3B,EAAqC,MAAML,SAAS,WAAIK,WAAJ,sBAAf;AACrC,QAAI,CAACA,WAAL,EAAkB,MAAMF,KAAK,wBAAX;AAElB,WAAOP,SAAS,CAACQ,iBAAV,CAA4BC,WAA5B,CAAP;AACH;AAhCS,CAAd;AAmCA,eAAeR,KAAf","sourcesContent":["/**\n * \n * Business logic for Marvel App\n * \n */\n\nimport marvelApi from \"../marvel-api\"\n\nconst logic = {\n\n    /**\n     *\n     * Search characters\n     *\n     * @param {string} query\n     *\n     * @returns {Promise}\n     */\n\n    searchCharacter(query) {\n        if (typeof query !== \"string\") throw TypeError(`${query} is not a string`);\n        if (!query.trim().length) throw Error(\"query is empty\");\n\n        return marvelApi.searchCharacter(query);\n    },\n\n    /**\n     *\n     * Retrieve character\n     *\n     * @param {number} characterId\n     *\n     * @returns {Promise}\n     */\n\n    retrieveCharacter(characterId) {\n        if (typeof characterId !== \"number\") throw TypeError(`${characterId} is not a number`);\n        if (!characterId) throw Error(`characterId is empty`);\n\n        return marvelApi.retrieveCharacter(characterId);\n    },\n}\n\nexport default logic\n"]},"metadata":{},"sourceType":"module"}