{"ast":null,"code":"import md5 from 'blueimp-md5';\n/**\n * Marvel API\n * \n * @version 0.0.1\n */\n\nvar marvelApi = {\n  apiKey: 'NO-API-KEY',\n  privateApiKey: 'NO-PRIVATE-API-KEY',\n  __hash__: null,\n\n  get hash() {\n    if (!this.__hash__) {\n      var apiKey = this.apiKey,\n          privateApiKey = this.privateApiKey;\n      var timeStamp = Date.now().toString();\n      this.__hash__ = \"apikey=\".concat(apiKey, \"&ts=\").concat(timeStamp, \"&hash=\").concat(md5(timeStamp + privateApiKey + apiKey));\n    }\n\n    return this.__hash__;\n  },\n\n  url: 'https://gateway.marvel.com/v1/public/',\n\n  /**\n   * \n   * Method to get character info\n   * \n   * @param {string} query  - Characters to be found.\n   * \n   * @throws {TypeError} - If query is not a string.\n   * @throws {Error} - If query is empty.\n   * @throws {Error} - If no character match.\n   * \n   * @returns {Object} - With characters info\n   */\n  searchCharacter: function searchCharacter(query) {\n    if (typeof query !== 'string') throw TypeError(\"\".concat(query, \" is not a string\"));\n    if (!query.trim().length) throw Error(\"query is empty\");\n    return fetch(\"\".concat(this.url, \"characters?\").concat(this.hash, \"&name=\").concat(query)).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (response.code !== 200) throw Error(response.message);\n      if (response.data.count === 0) throw Error('No characters found');\n      var data = response.data;\n      return data;\n    });\n  },\n\n  /**\n   * \n   * Method to get character info\n   * \n   * @param {number} characterId\n   * \n   * @throws {TypeError} - If characterId is not a number.\n   * @throws {Error} - If characterId is empty.\n   * @throws {Error} - If no character matches.\n   * \n   * @returns {Object} - With character info\n   */\n  retrieveCharacter: function retrieveCharacter(characterId) {\n    if (typeof characterId !== 'number') throw TypeError(\"\".concat(characterId, \" is not a number\"));\n    if (!characterId.trim().length) throw Error(\"characterId is empty\");\n    return fetch(\"\".concat(this.url, \"characters/\").concat(characterId, \"?\").concat(this.hash)).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (!response.data) throw Error(response.status);\n      var data = response.data;\n      if (data) return data;\n      throw Error(response.message);\n    });\n  },\n\n  /**\n  * \n  * Method to get comic info\n  * \n  * @param {string} comicId  - Comic to be found.\n  * \n  * @throws {TypeError} - If comicId is not a string.\n  * @throws {Error} - If comicId is empty.\n  * @throws {Error} - If no character matches.\n  * \n  * @returns {Object} - With comic info\n  */\n  retrieveComic: function retrieveComic(comicId) {\n    if (typeof comicId !== 'string') throw TypeError(\"\".concat(comicId, \" is not a string\"));\n    if (!comicId.trim().length) throw Error(\"comicId is empty\");\n    return fetch(\"\".concat(this.url, \"comics/\").concat(comicId, \"?\").concat(this.hash)).then(function (response) {\n      return response.json();\n    }).then(function (response) {\n      if (!response.data) throw Error(response.status);\n      var data = response.data;\n      if (data) return data;\n      throw Error(response.message);\n    });\n  }\n};\nexport default marvelApi;","map":{"version":3,"sources":["/Users/alexbarba/bootcamp/react-hooks-demo/marvel-app/src/marvel-api/index.js"],"names":["md5","marvelApi","apiKey","privateApiKey","__hash__","hash","timeStamp","Date","now","toString","url","searchCharacter","query","TypeError","trim","length","Error","fetch","then","response","json","code","message","data","count","retrieveCharacter","characterId","status","retrieveComic","comicId"],"mappings":"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","sourcesContent":["import md5 from 'blueimp-md5'\n\n/**\n * Marvel API\n * \n * @version 0.0.1\n */\n\nconst marvelApi = {\n    apiKey: 'NO-API-KEY',\n\n    privateApiKey: 'NO-PRIVATE-API-KEY',\n\n    __hash__: null,\n\n    get hash() {\n        if (!this.__hash__) {\n            const { apiKey, privateApiKey } = this\n            const timeStamp = Date.now().toString()\n            this.__hash__ = `apikey=${apiKey}&ts=${timeStamp}&hash=${md5(timeStamp + privateApiKey + apiKey)}`\n        }\n        return this.__hash__\n    },\n\n    url: 'https://gateway.marvel.com/v1/public/',\n\n    /**\n     * \n     * Method to get character info\n     * \n     * @param {string} query  - Characters to be found.\n     * \n     * @throws {TypeError} - If query is not a string.\n     * @throws {Error} - If query is empty.\n     * @throws {Error} - If no character match.\n     * \n     * @returns {Object} - With characters info\n     */\n\n    searchCharacter(query) {\n        if (typeof query !== 'string') throw TypeError(`${query} is not a string`)\n        if (!query.trim().length) throw Error(`query is empty`)\n\n        return fetch(`${this.url}characters?${this.hash}&name=${query}`)\n            .then(response => response.json())\n\n            .then(response => {\n                if (response.code !== 200) throw Error(response.message)\n                if (response.data.count === 0) throw Error('No characters found')\n\n                const { data } = response\n\n                return data\n            })\n    },\n\n    /**\n     * \n     * Method to get character info\n     * \n     * @param {number} characterId\n     * \n     * @throws {TypeError} - If characterId is not a number.\n     * @throws {Error} - If characterId is empty.\n     * @throws {Error} - If no character matches.\n     * \n     * @returns {Object} - With character info\n     */\n\n    retrieveCharacter(characterId) {\n        if (typeof characterId !== 'number') throw TypeError(`${characterId} is not a number`)\n        if (!characterId.trim().length) throw Error(`characterId is empty`)\n\n        return fetch(`${this.url}characters/${characterId}?${this.hash}`)\n            .then(response => response.json())\n            .then(response => {\n                if (!response.data) throw Error(response.status)\n\n                const { data } = response\n\n                if (data) return data\n                throw Error(response.message)\n            })\n    },\n\n    /**\n    * \n    * Method to get comic info\n    * \n    * @param {string} comicId  - Comic to be found.\n    * \n    * @throws {TypeError} - If comicId is not a string.\n    * @throws {Error} - If comicId is empty.\n    * @throws {Error} - If no character matches.\n    * \n    * @returns {Object} - With comic info\n    */\n\n    retrieveComic(comicId) {\n        if (typeof comicId !== 'string') throw TypeError(`${comicId} is not a string`)\n        if (!comicId.trim().length) throw Error(`comicId is empty`)\n\n        return fetch(`${this.url}comics/${comicId}?${this.hash}`)\n            .then(response => response.json())\n\n            .then(response => {\n                if (!response.data) throw Error(response.status)\n\n                const { data } = response\n\n                if (data) return data\n                throw Error(response.message)\n            })\n    }\n}\n\nexport default marvelApi"]},"metadata":{},"sourceType":"module"}